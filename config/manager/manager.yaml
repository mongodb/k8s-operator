apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-kubernetes-operator
  namespace: mongodb
  labels:
    owner: mongodb
  annotations:
    email: "support@mongodb.com"
spec:
  replicas: 1
  selector:
    matchLabels:
      name: mongodb-kubernetes-operator
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        name: mongodb-kubernetes-operator
    spec:
      containers:
      - command:
        - /usr/local/bin/entrypoint
        env:
        - name: WATCH_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: OPERATOR_NAME
          value: mongodb-kubernetes-operator
        - name: AGENT_IMAGE
          value: quay.io/mongodb/mongodb-agent:10.29.0.6830-1
        - name: VERSION_UPGRADE_HOOK_IMAGE
          value: quay.io/mongodb/mongodb-kubernetes-operator-version-upgrade-post-start-hook:1.0.2
        - name: READINESS_PROBE_IMAGE
          value: quay.io/mongodb/mongodb-kubernetes-readinessprobe:1.0.4
        - name: MONGODB_IMAGE
          value: mongo
        - name: MONGODB_REPO_URL
          value: docker.io
        image: quay.io/mongodb/mongodb-kubernetes-operator:0.6.2
        imagePullPolicy: Always
        name: mongodb-kubernetes-operator
        resources:
          limits:
            cpu: 1100m
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 200Mi
        securityContext:
          readOnlyRootFilesystem: true
          runAsUser: 2000
          runAsNonRoot: true
        # ReadinessProbe: indicates whether the container is ready to service requests.
        # If the ReadinessProbe fails, the endpoints controller will remove the
        # podâ€™s IP address from the endpoints of all services that match the pod.
        # The default state of Readiness before the initial delay is Failure.
        #
        # Checks every w seconds, after 2 second initial wait
        # Fails after 2 probes => failureThreshold * periodSeconds = 4s
        # It means that after 4s the Service doesn't send more traffic to the pod
        
        # LivenessProbe: indicates whether the container is live, i.e. running.
        # If the LivenessProbe fails, the kubelet will kill the container and
        # the container will be subjected to its RestartPolicy.
        # The default state of Liveness before the initial delay is Success
        #
        # Checks every 10 seconds, after 5 second initial wait
        # Fails after 3 probes => failureThreshold * periodSeconds = 30s
        # Timeout is 1s (1000ms), that's why we use promise timeout with 900ms
        ports:
        - containerPort: 8080
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20
      serviceAccountName: mongodb-kubernetes-operator

